<html
    window-width="800dip"
    window-height="600dip"
>
<head>
<title>sciter files demo</title>
<style>

@import url(node_modules/sciter-logger/src/logger.css);

button {
    margin: 5dip;
}

</style>
<script type="module">

import * as sys from "@sys";
import * as sciter from "@sciter";
import Logger from "node_modules/sciter-logger/src/logger.js";
import Utils from "node_modules/sciter-utils/src/utils.js";

// initialize logger
Logger.init();

// attach logger to console
Logger.attach();

// capture unhandled exceptions
Logger.capture();

document.on("ready", function() {
    // subscribe to logger messages
    Logger.plaintext(document.$("plaintext#logger"));

    // log sciter version
    console.debug(Utils.sciterInfo());

    // add support for F5 reload
    Utils.addReloadWindow();

    // close window on escape key press
    Utils.closeWindowOnEscape(Window.this);

    // center window on screen
    Utils.centerWindow(Window.this, "screen");

    // bring window to front and set input focus
    if (!Window.this.activate(true))
        console.error("Activate window - FAILED");

    console.line();

    //syncTests();
    //asyncTests();
});

document.on("click", "button", function(event, button) {
    switch (button.id) {
        case "sync":
            syncTests();
            break;

        case "async":
            asyncTests();
            break;

        default:
            throw new Error("unknown button");
    }
});

function syncTests() {
    const file = ".gitignore";

    const stat = sys.fs.$stat(file);
    console.log("stat object -", stat);

    //console.log(`sync file exists ${file} - isFile ${stat.isFile} - isDirectory ${stat.isDirectory} - isSymbolicLink ${isSymbolicLink}`);
    console.log(`sync file exists ${file} - isFile ${stat.isFile} - isDirectory ${stat.isDirectory}`);
    console.line();

    let result = sys.fs.$readfile(file);
    console.log(`sync read file ${file} -`, sciter.decode(result));
    console.line();

    // DOES NOT EXIST YET
    //console.log(`sync write file ${file} -`, sys.fs.$writefile(file, sciter.encode("test")));
    //console.line();

    console.log(`sync copy file ${file} -`, sys.fs.$copyfile(file, `test/${file}.copy`));
    console.line();

    // DOES NOT EXIST YET
    //console.log(`sync rename file ${file} -`, sys.fs.$rename(`test/${file}.copy`, `test/${file}.copy2`));
    //console.line();

    // DOES NOT EXIST YET
    //console.log(`sync delete file ${file} -`, sys.fs.$unlink(`test/${file}.copy2`));
    //console.line();

    let dir = "test";
    console.log(`sync read dir ${dir} -`, sys.fs.$readdir(dir));
    console.line();

    // DOES NOT EXIST YET
    //console.log(`sync scan dir ${dir} -`, sys.fs.$scandir(dir));
    //console.line();

    dir = "test/test";
    console.log(`sync delete dir fs.$mkdir ${dir} -`, sys.fs.$rmdir(dir));
    console.line();

    console.log(`sync make dir fs.$mkdir ${dir} -`, sys.fs.$mkdir(dir));
    console.line();
}

async function asyncTests() {
    const file = ".gitignore";

    let result = await sys.fs.readFile(file);
    console.log(`async read file fs.readFile ${file} -`, sciter.decode(result));
    console.line();

    result = await sys.fs.copyfile(file, "test/.gitignore.copy");
    console.log(`async copy file fs.copyfile ${file}`, result);
    console.line();

    // not working for the time being
    // https://sciter.com/forums/topic/sys-fs-rename-not-working/
        result = await sys.fs.rename("test/.gitignore.copy", "test/.gitignore.copy2");
        console.log("async rename file fs.rename", result);
    console.line();

    let dir = "bin";

    result = await sys.fs.readdir(dir);
    console.log(`async read dir fs.readdir ${dir} -`, result);
    console.line();

    dir = "test/test";

    result = await sys.fs.rmdir(dir);
    console.log(`async remove dir fs.rmdir ${dir} -`, result);
    console.line();

    result = await sys.fs.mkdir(dir);
    console.log(`async make dir fs.mkdir ${dir} -`, result);
    console.line();

    const template = "test/test-XXXXXX";

    result = await sys.fs.mkdtemp(template);
    console.log(`async create temporary directory fs.mkdtemp ${template} -`, result);
    console.line();

    result = await sys.fs.mkstemp("test/test-XXXXXX");
    console.log(`async create temporary file fs.mkstemp ${template} -`, result);
    console.line();
}

</script>
</head>
<body>
    <button #sync>sync tests</button>
    <button #async>async tests</button>
    <plaintext #logger readonly />
</body>
</html>
